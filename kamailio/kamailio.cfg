#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v4.0 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:

# put server specific information into a separate def file.
include_file "server.def"
##!define WITH_DEBUG

##!define WITH_MYSQL
##!define WITH_LOADBALANCE
##!define WITH_AUTH
##!define WITH_ALIASDB
##!define WITH_USRLOCDB
##!define WITH_LCR
######!define WITH_XHTTP_RPC

##!define WITH_NAT
##!define WITH_ANTIFLOOD

# additional security items
server_signature=no
sip_warning=0
#
# *** To run in debug mode: 
#     - define WITH_DEBUG
#
# *** To enable mysql: 
#     - define WITH_MYSQL
#
# *** To enable authentication execute:
#     - enable mysql
#     - define WITH_AUTH
#     - add users using 'kamctl'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#     - define WITH_USRLOCDB
#
# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database
#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

# *** Value defines - IDs used later in config
##!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
##!ifndef DBURL
##!define DBURL "mysql://kamailio:kamailio@localhost/kamailio"
##!endif
##!endif
#!define MULTIDOMAIN 0

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=3
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* add local domain aliases */
alias="FQDN"
alias=NATIP

/* uncomment and configure the following line if you want Kamailio to 
   bind on a specific interface/port/proto (default bind on all available) */
listen=eth0:5060
#listen=eth0:5080
advertised_address=NATIP
/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
;port=5060
;port=5080

#!ifdef WITH_TLS
enable_tls=yes
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605

# xHTTP config item
#
# SIP requires a Content-Length header for TCP transport. But most HTTP
# clients do not set the content length for normal GET requests.  
# Therefore, the core must be configured to allow incoming requests without
# content length header:
tcp_accept_no_cl=yes

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules_k:modules"
#!else
mpath="/usr/local/lib/kamailio/modules_k/:/usr/local/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "htable"
loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "ipops.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "pike.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_LOADBALANCE
loadmodule "dispatcher.so"
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_XHTTP_RPC
loadmodule "xhttp.so"
loadmodule "xhttp_rpc.so"
#!endif

#!ifdef WITH_LCR
loadmodule "lcr.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- control params -----
#modparam("ctl", "binrpc", "unixs:/tmp/unix_stream")
#modparam("ctl", "binrpc", "unixd:/tmp/unix_dgram")

# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 3000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", 
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", "DBURL")
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", "DBURL")
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", "DBURL")
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "rpid")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", "DBURL")
modparam("permissions", "db_mode", 1)
#!endif

#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
#modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
modparam("rtpengine","rtpengine_sock","udp:127.0.0.1:7722")
# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif


#!ifdef WITH_TLS
# ----- tls params -----
#modparam("tls", "config", "//etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
#modparam("debugger", "cfgtrace", 1)
#!endif

#!ifdef WITH_LOADBALANCE
# ----- load balance ----- #
modparam("dispatcher", "db_url", "DBURL")
modparam("dispatcher", "table_name", "dispatcher")
#modparam("dispatcher", "force_dst", 1)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
modparam("dispatcher", "ds_ping_interval", 120)
modparam("dispatcher", "ds_ping_from", "sip:sip@FQDN")
modparam("dispatcher", "ds_probing_mode", 0)
modparam("dispatcher", "ds_probing_threshhold", 1)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;code=484;code=480;code=404;code=403")
#required for load-based routing
modparam("dispatcher", "dstid_avp", "$avp(dsdstid)")
modparam("dispatcher", "attrs_avp", "$avp(dsattrs)")
modparam("dispatcher", "ds_hash_size", 8)
#!endif

#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", "DBURL")
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_LCR
# ----- Least Cost Routing ----- #
modparam("lcr", "db_url", "DBURL")
modparam("lcr", "lcr_count", 10)
#modparam("lcr", "lcr_gw_table", "lcr_gw")
#modparam("lcr", "lcr_rule_table", "lcr_rule")
#modparam("lcr", "lcr_rule_target_table", "lcr_rule_target")
#modparam("lcr", "tag_column", "tag")
#modparam("lcr", "weight_column", "weight")
#modparam("lcr", "flags_column", "flags")
#modparam("lcr", "gw_name_column", "gw_name")
#modparam("lcr", "ip_addr_column", "ip_addr")
#modparam("lcr", "port_column", "port")
#modparam("lcr", "hostname_column", "hostname")
#modparam("lcr", "uri_scheme_column", "uri_scheme")
#modparam("lcr", "strip_column", "string")
#modparam("lcr", "transport_column", "transport")
#modparam("lcr", "grp_id_column", "grp_id")
#modparam("lcr", "lcr_table", "lcr_rule")
#modparam("lcr", "prefix_column", "prefix")
#modparam("lcr", "from_uri_column", "from_uri")
#modparam("lcr", "priority_column", "priority")
modparam("lcr", "gw_uri_avp", "$avp(i:709)")
modparam("lcr", "ruri_user_avp", "$avp(i:500)")
modparam("lcr", "flags_avp", "$avp(i:712)")
modparam("lcr", "lcr_id_avp", "$avp(s:lcr_id_avp)")
#modparam("^auth|lcr", "rpid_avp", "$avp(i:302)")
#!endif

####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	#xlog("L_INFO","Clearing Route Header before adding appropriate proxy route.\n");
	#remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")){

		xlog("L_INFO","Clearing Route Header before adding appropriate proxy route.\n");
	        remove_hf("Route");

 		#!ifdef WITH_NAT
	        //if(ds_is_from_list("0")) {
	        if(is_in_subnet("$si","SUBNET")) {
	            record_route_preset("NATIP:5060;r2=on","LOCALIP:5060;r2=on");
		    xlog("L_INFO","Request is coming from inside host, adding route header with NATIP:5060/LOCALIP:5060.\n");
	
	        } else {
	            record_route_preset("LOCALIP:5060;r2=on","NATIP:5060;r2=on");
	            xlog("L_INFO","Request is coming from outside, probably a carrier, adding route header with LOCALIP:5060/NATIP:5060.\n");
	        }
		#!else

		record_route();
		#!endif
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

	# dispatch requests to foreign domains
	route(SIPOUT);

	### requests for my local domains

	# handle registrations
	route(REGISTRAR);

	if (is_method("OPTIONS") ) {
		sl_send_reply("200", "OK");
		exit;
	}
	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	#!ifdef WITH_LOADBALANCE
	
	if( is_method("INVITE") ) {  #&& !ds_is_from_list() ) {
		route(LOADBALANCE);
	}

	# user location service
	route(LOCATION);
	#!endif
}


route[RELAY] {
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

#!ifdef WITH_NAT
    # if(ds_is_from_list("0")) {
    if(is_in_subnet("$si","SUBNET")){
        #xlog("***** $rm was sent to LOCALIP from <$src_ip>, advertising NATIP.\n");
        set_advertised_address("NATIP"); ##Advertise NAT IP !!!!!!!! make dynamic or substitute at top
        #record_route_advertised_address("$sel(cfg_get.server.natip)");
    } else {
        #xlog("***** $rm was sent to NATIP from <$src_ip>, advertising LOCALIP.\n");
        set_advertised_address("LOCALIP"); ##Advertise LOCAL IP !!!!!!!! make dynamic or substitue at top
        #record_route_advertised_address("$sel(cfg_get.server.localip)");

    }
#!endif

}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		xlog("L_INFO","Route Header: $hdr(Route)\n");
		if (loose_route()) {
			route(DLGURI);
			if (is_method("BYE")) {
				xlog("L_INFO","****** Loose Routed Bye! ********\n");
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			}
			else if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				xlog("L_INFO","*** Stateless ACK\n");
				//route(NATMANAGE);
			}
			else if ( is_method("NOTIFY") ) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				record_route();
			}
			else if (has_body("application/sdp")) {
				# In Dialog Request contains SDP, sending through NATMANAGE...
			        route(NATMANAGE);
    			}
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					route(RELAY);
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			xlog("L_INFO","$rm doesn't have a dialog...\n");
			sl_send_reply("404","Not here: $rm");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER")) {
		if(isflagset(FLT_NATS)) {
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging 
			## setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

		exit;
	}
}

# USER location service
route[LOCATION] {
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}

	route(RELAY);
	exit;
}


# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH

#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address()) {
		# source IP allowed
		return;
	}
#!endif

	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}

#!endif
	return;
}

# Caller NAT detection route
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			add_contact_alias();
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control
route[NATMANAGE] {
#!ifdef WITH_NAT
	# All rtp engine stuff should be here

	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	//if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
	//	return;

	# Manage proxy as part of routing to and from asterisk
	#rtpproxy_manage("co");
	# if( ds_is_from_list("0")){
	if(is_in_subnet("$si","SUBNET")){
		rtpengine_manage("ICE=remove replace-origin replace-session-connection asymmetric media-address=NATIP");
	} else {
		rtpengine_manage("ICE=remove replace-origin replace-session-connection asymmetric media-address=LOCALIP");
	}

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
		xlog("Contact Header:$ct\n");
		add_contact_alias();
		xlog("Adding contact alias to reply: $ru\n");
		xlog("Contact Header after alias: $ct\n");
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		xlog("L_INFO","******* Is Destination URI Set()*********\n");
		handle_ruri_alias();
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	if (!uri==myself) {
		append_hf("P-hint: outbound\r\n");
		route(RELAY);
	}
}

#!ifdef WITH_LOADBALANCE
route[LOADBALANCE] {
       
	#if(!ds_is_from_list()){
	#ds_select_dst(destination_set, algorithm) function chooses the destination for the call. For this it can use a lot of algorithms.
        #Alg. 0 is the default one that does the the choosing over the call ID hash
        #Alg. 4 is a Round-Robin
        #Alg. 10 is the one that chooses the destination based on the minimum load of all destinations
        # if(ds_is_from_list("0")){
	if(is_in_subnet("$si","SUBNET")){
		xlog("L_NOTICE", "Request received from Asterisk host: $ua\n");
		$var(a) = "1";
		$var(b) = "2";	
	} else {
                xlog("L_NOTICE", "Request received from outside host: $ua\n");
		$var(a) = "0";
		$var(b) = "1";
	}
        /* if (uri=~"^sip:011.*") {
       		$var(a) = "2";
		$var(b) = "2";
		xlog("L_NOTICE", "*** International Call, sending to International Dispatcher Group $var(a): LOGTAG\n");
        } */
#!ifdef WITH_LCR
	if (load_gws($var(b), $rU, $var(caller_uri))) {
        	if (next_gw()) {
            		xlog("*** Performing Inbound LCR For: LOGTAGn");
	        	t_set_fr(0,2000);
		        t_on_failure("MANAGE_FAILURE");

        		route(NATMANAGE);       
		        route(RELAY);
			return;
        	} else {
	        	xlog("*** No LCR Gateways. Failing to dispatcher: LOGTAG\n");
	        	return;
        	}
    	}
#!endif 	
	if(!ds_select_dst($var(a), "6")) {
                #if we are here that means no destination is available. We notify the user by 404 and exit the script.
                xlog("L_NOTICE", "No destination available for Dispatcher group $var(a)!\n");
                #send_reply("404", "No destination group $var(a)");
                return;
        
        	#xlog("L_NOTICE", "Routing call to <$ru> via <$du>\n");
	#rtpproxy_manage("rwei");
        # r => trust-address # in SDP
        # w => symmetric # force symmetric RTP
        # ei => internal # direction
	#rtpengine_manage("trust-address symmetric internal");
	
	// Transform From Header For E.164 Compliance
	
	} else {

		#rtpproxy_manage("cawie");	
		# c => replace-session-connection # replace session-level SDP connection if media includes connection information
		# a => asymmetric # UA does not support symmetric RTP
		# w => symmetric # force symmetric RTP
		# ie => external # direction
	#	rtpengine_manage("replace-session-connection asymmetric symmetric external");
		xlog("*** Destination set to: $avp(AVP_DST)\n");
		xlog("L_NOTICE", "Outbound call from <$ru> to the world\n");
		/* if ( subst("/^From:(.*)sip:[^@]*@[a-zA-Z0-9.:]+(.*)$/From:\1$(fu{s.replace,sip:+1,sip:})\2/ig") ) {
                        xlog("*** Removed E.164 prefix in FROM HEADER: LOGTAG\n");

                };

		if ( subst("/^f:(.*)sip:[^@]*@[a-zA-Z0-9.:]+(.*)$/f:\1$(fu{s.replace,sip:+1,sip:})\2/ig") ) {
                        xlog("*** Removed E.164 prefix in TRUNCATED FROM HEADER: LOGTAG\n");

                }; */
		
		//xlog("*** Gateway Attributes: $avp(dsattrs)\n");
		//$var(prefix)=$(avp(dsattrs){param.value,prefix});
		//xlog("*** Checking if $var(prefix) is null...\n");
                //if($var(prefix)!=$null) {
			//xlog("L_INFO","*** Gateway has a prefix of $var(prefix), adding to $rU...\n");
		//	xlog("*** test ***\n");
                //        $rU = $var(prefix) + $rU;
		//	xlog("*** New R-URI: $ru\n");
                //}


	}

        #set the no_reply_recieved timeout to 2 second ... adjust the value to your need
        #note: The first value "0" is invite timeout .. we do not need to change it
        #This means that is the selected media server fails to respond within 2 seconds the failure_route "MANAGE_FAILURE" is called
        #note: this implies that ale the signaling from media servers on the way back to the user goes through the proxy as well
        t_set_fr(0,2000);
        t_on_failure("MANAGE_FAILURE");

	route(NATMANAGE);	
	route(RELAY);
        return;
}
#!endif

# manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	//route(NATMANAGE);
}

# manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
	if(status=~"[12][0-9][0-9]") {

		route(NATMANAGE);
	}
}


# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);

	if (t_is_canceled()) {
		exit;
	}
	if(!$avp(dsdstid)){
#!ifdef WITH_LCR
		if (next_gw()) {
                        xlog("*** Performing Inbound LCR For: LOGTAG\n");
                        t_set_fr(0,2000);
                        t_on_failure("MANAGE_FAILURE");

                        route(NATMANAGE);       
                        route(RELAY);
                        exit;
                } else {
                        xlog("*** No More LCR Gateways: LOGTAG\n");
                        send_reply("404", "No destination");
			return;
                }


#!endif
	} else {

#!ifdef WITH_LOADBALANCE
        xlog("L_NOTICE", "Media server $du failed to answer, selecting other one!\n");
        # next DST - only for 500 reply or local timeout (set by t_set_fr())
        #if (t_check_status("500") || t_branch_timeout() || !t_branch_replied())
        if (status=~"[456][0-9][0-9]" || t_branch_timeout() || !t_branch_replied())
        {
                #we mark the destination Inactive and Probing
                #ds_mark_dst("ip");
                #select the new destination
                if(ds_next_dst())
                {
                        #again set local timeout for reply
                        t_set_fr(0,2000);
                        t_on_failure("MANAGE_FAILURE");
                        route(RELAY);
                        exit;
                }
                else
                {
                        #last available node failed to reply, no other destinations available
                        send_reply("404", "No destination");
                        exit;
                }
        }
#!endif
	}
}


#!ifdef WITH_XHTTP_RPC
# handle xhttp_rpc requests
#event_route[xhttp:request]{
#	$var(xhttp_rpc_root) = $(hu{s.substr,0,9});
#	if($var(xhttp_rpc_root) == "/rpc")
#		dispatch_xhttp_rpc();
#	else
#		xhttp_reply("200", "OK", "text/html",
#			"<html><body>Wrong URL $hu</body></html>");
#}
#!endif
